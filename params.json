{"name":"Nanotwitter","tagline":"","body":"NanoTwitter TEAMAB\r\n=======\r\n[ ![Codeship Status for cheng9393/NanoTwitter](https://codeship.com/projects/202aa180-5fb8-0133-eeaa-4e587625a674/status?branch=master)](https://codeship.com/projects/111898)\r\n\r\n[![Code Climate](https://codeclimate.com/github/cheng9393/NanoTwitter/badges/gpa.svg)](https://codeclimate.com/github/cheng9393/NanoTwitter)\r\n\r\n[Github https://github.com/teamab2015/NanoTwitter](https://github.com/teamab2015/NanoTwitter)\r\n\r\n[Demo https://teamab.herokuapp.com](https://teamab.herokuapp.com \"Demo\")  \r\n\r\nThis a sinatra application that imitates Twitter. It has following functions:\r\n1. view timeline\r\n2. follow/unfollow\r\n3. notification\r\n5. tweet with _@ mention_ and _# tag_\r\n6. tag view\r\n7. reply view  \r\n\r\nNanoTwitter cached all the relationship (\"followers-#{followee_id}\" stores a set of follower_ids), all users (\"user-#{user.id}\" stores a JSON string of user info), timeline (\"homeTimeline\" stores the global timeline, \"userTimeline-#{user_id}\" stores the timeline of a user). The relationship and user cache is loaded at the start of NanoTwitter and updated while any action among follow, unfollow, register happens.The timeline is a first fetched from database and then loaded into redis. When a person tweet, unprocessed tweet string will be added to related timeline list. Since the all timeline cache has an expire timeout of one of two minutes, processed tweet string will show up after that expire timeout. NanoTwitter also use queue to process tweet, because tweet is very costly, as it involves write tag, mention to database, add tag and mention link to original tweet and then write it to database.\r\n\r\nFor test record, check loadtest.txt\r\n\r\nrequire ruby 2.+  \r\nRun rake db:reset to clear the database and reseed.  \r\nThe development database comes with a user(email=test@test.com, password=test).  \r\n\r\nRoutes\r\n------\r\n`/`  \r\nIf not logged in, then display top 50 tweets of all users, else redirect to `/user/:logged_in_user_id`\r\n\r\n`/user/:id`  \r\nThe home page of user, displaying Top 50 tweets of followed users and himself\r\n\r\n`/login/:id`  \r\nlog in the user with user_id, may accept requests with password parameter to log in\r\n\r\n`/logout`  \r\nlog out the current user, after logging out redirect to `/`\r\n\r\n`/user/register`  \r\ndisplay register page\r\n\r\n`/login`  \r\ndisplay the login page, after logging in redirect to `/user/:id`\r\n\r\n`/test/reset`  \r\ndelete all rows containing test user in relations table, delete all tweets send by test users, delete all test users\r\n\r\n`/test/seed/:n`  \r\ncreate n fake users\r\n\r\n`/test/tweets/:n`  \r\nuser “testuser” generates n new fake tweets\r\n\r\n`/test/follow/:n`  \r\nrandomly select n users to follow user “testuser”\r\n\r\n`/test/users`  \r\ndiaplay all the fake users\r\n\r\nAPI\r\n---\r\n\r\n**GET `v1/users/:id`**  \r\nGet the user of given id   \r\nresult:\r\n```\r\n{\r\n    name: text,\r\n    email: text,\r\n    id: integer,\r\n    avatar: text\r\n}\r\n```\r\n\r\n**POST `v1/users`**  \r\nCreate a user  \r\nparameters:\r\n```\r\nname: text, email: text, id: integer, avatar: text\r\n```\r\n\r\n**GET `v1/tweets/:id`**\r\nGet the tweet of given id  \r\nresult:\r\n```\r\n{\r\n    id: integer,\r\n    content: text,\r\n    created: datetime,\r\n    sender_id: integer,\r\n    (optional)user: {\r\n        name: text,\r\n        email: text,\r\n        id: integer,\r\n        avatar: text\r\n        }\r\n}\r\n```\r\n\r\n**POST `v1/users/:id/tweets`**  \r\n*authentication: true*  \r\nCreate a tweet for a user  \r\nparameters:\r\n```\r\nid: integer, content: text\r\n```\r\n\r\n**GET `v1/tweets/?sort=[+-{field_name}]&page={#}&per_page={#}&embeded=[{field_name}]`**  \r\nSearch for tweets\r\nresult:\r\n```\r\n[{\r\n    id: integer,\r\n    content: text,\r\n    created: datetime,\r\n    sender_id: integer,\r\n    (optional)user: {\r\n        name: text,\r\n        email: text,\r\n        id: integer,\r\n        avatar: text\r\n        }\r\n}]\r\n```\r\n\r\n**GET `v1/users/:id/tweets?sort=[+-{field_name}]&page={#}&per_page={#}&embeded=[{field_name}]`**  \r\nSearch the tweets send by a user  \r\nresult:\r\n```\r\n[{\r\n    id: integer,\r\n    content: text,\r\n    created: datetime,\r\n    sender_id: integer,\r\n}]\r\n```\r\n\r\n**GET `v1/users/:id/followees?embeded=[{field_name}]`**  \r\nGet the followees of a user  \r\nresult:\r\n```\r\n[{followee_id:integer}]\r\n```\r\nor\r\n```\r\n[{name: text,\r\n    email: text,\r\n    id: integer,\r\n    avatar: text\r\n}]\r\n```\r\n\r\n**GET `v1/users/:id/followers?embeded=[{field_name}]`**  \r\nGet the followees of a user  \r\nresult:\r\n```\r\n[{follower_id:integer}]\r\n```\r\nor\r\n```\r\n[{\r\n    name: text,\r\n    email: text,\r\n    id: integer,\r\n    avatar: text\r\n}]\r\n```\r\n\r\n**POST `/users/:id/follow?followee={followee_id}`**  \r\n*authentication: true*  \r\nCreate relation that the user(with id) follows another(with followee_id)  \r\n\r\n**POST `/users/:id/unfollow?followee={followee_id}`**  \r\n*authentication: true*  \r\nDelete relation that the user(with id) follows another(with followee_id)\r\n\r\n\r\n![ScreenShot](https://github.com/teamab2015/NanoTwitter/blob/gh-pages/images/Screen%20Shot%202015-12-07%20at%203.30.28%20AM.png)\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}